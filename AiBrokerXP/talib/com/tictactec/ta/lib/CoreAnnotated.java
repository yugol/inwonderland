/*
 * TA-LIB Copyright (c) 1999-2007, Mario Fortier
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 * 
 * - Neither name of author nor the names of its contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * DO NOT MODIFY this file.
 * This file is automatically generated by gen_code.
 * 
 * If you are not re-generating the java code (which is most
 * likely the case), just ignore this file.
 */

package com.tictactec.ta.lib;

import com.tictactec.ta.lib.meta.annotation.FuncInfo;
import com.tictactec.ta.lib.meta.annotation.InputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.InputParameterType;
import com.tictactec.ta.lib.meta.annotation.IntegerList;
import com.tictactec.ta.lib.meta.annotation.IntegerRange;
import com.tictactec.ta.lib.meta.annotation.OptInputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.OptInputParameterType;
import com.tictactec.ta.lib.meta.annotation.OutputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.OutputParameterType;
import com.tictactec.ta.lib.meta.annotation.RealRange;

public class CoreAnnotated extends Core {

    @Override
    @FuncInfo(
            name = "ACOS",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode acos(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.acos(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int acosLookback(
            ) {
        return super.acosLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "AD",
            group = "Volume Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode ad(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLCV",
                            flags = 30,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final double inVolume[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ad(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                inVolume,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "ADD",
            group = "Math Operators",
            flags = 0,
            nbInput = 2,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode add(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.add(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int addLookback(
            ) {
        return super.addLookback(
                );
    }

    @Override
    public int adLookback(
            ) {
        return super.adLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "ADOSC",
            group = "Volume Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode adOsc(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLCV",
                            flags = 30,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final double inVolume[],
                    @OptInputParameterInfo(
                            paramName = "optInFastPeriod",
                            displayName = "Fast Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastPeriod",
                            defaultValue = 3,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSlowPeriod",
                            displayName = "Slow Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowPeriod",
                            defaultValue = 10,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowPeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.adOsc(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                inVolume,
                optInFastPeriod,
                optInSlowPeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int adOscLookback(
            final int optInFastPeriod,
            final int optInSlowPeriod) {
        return super.adOscLookback(
                optInFastPeriod,
                optInSlowPeriod);
    }

    @Override
    @FuncInfo(
            name = "ADX",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode adx(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.adx(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int adxLookback(
            final int optInTimePeriod) {
        return super.adxLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "ADXR",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode adxr(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.adxr(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int adxrLookback(
            final int optInTimePeriod) {
        return super.adxrLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "APO",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 3,
            nbOutput = 1
            )
            public RetCode apo(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInFastPeriod",
                            displayName = "Fast Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastPeriod",
                            defaultValue = 12,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSlowPeriod",
                            displayName = "Slow Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowPeriod",
                            defaultValue = 26,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInMAType",
                            displayName = "MA Type",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.apo(
                startIdx,
                endIdx,
                inReal,
                optInFastPeriod,
                optInSlowPeriod,
                optInMAType,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int apoLookback(
            final int optInFastPeriod,
            final int optInSlowPeriod,
            final MAType optInMAType) {
        return super.apoLookback(
                optInFastPeriod,
                optInSlowPeriod,
                optInMAType);
    }

    @Override
    @FuncInfo(
            name = "AROON",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 2
            )
            public RetCode aroon(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outAroonDown",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outAroonDown[],
                    @OutputParameterInfo(
                            paramName = "outAroonUp",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outAroonUp[]
            ) {
        return super.aroon(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outAroonDown,
                outAroonUp
                );
    }

    @Override
    public int aroonLookback(
            final int optInTimePeriod) {
        return super.aroonLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "AROONOSC",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode aroonOsc(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.aroonOsc(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int aroonOscLookback(
            final int optInTimePeriod) {
        return super.aroonOscLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "ASIN",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode asin(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.asin(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int asinLookback(
            ) {
        return super.asinLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "ATAN",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode atan(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.atan(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int atanLookback(
            ) {
        return super.atanLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "ATR",
            group = "Volatility Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode atr(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.atr(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int atrLookback(
            final int optInTimePeriod) {
        return super.atrLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "AVGPRICE",
            group = "Price Transform",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode avgPrice(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.avgPrice(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int avgPriceLookback(
            ) {
        return super.avgPriceLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "BBANDS",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 4,
            nbOutput = 3
            )
            public RetCode bbands(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 5,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInNbDevUp",
                            displayName = "Deviations up",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInNbDevUp",
                            defaultValue = 2.00000,
                            min = -30000000000000002000000000000000000000.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 2,
                            suggested_start = -2.00000,
                            suggested_end = 2.00000,
                            suggested_increment = 0.20000
                    ) final double optInNbDevUp,
                    @OptInputParameterInfo(
                            paramName = "optInNbDevDn",
                            displayName = "Deviations down",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInNbDevDn",
                            defaultValue = 2.00000,
                            min = -30000000000000002000000000000000000000.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 2,
                            suggested_start = -2.00000,
                            suggested_end = 2.00000,
                            suggested_increment = 0.20000
                    ) final double optInNbDevDn,
                    @OptInputParameterInfo(
                            paramName = "optInMAType",
                            displayName = "MA Type",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outRealUpperBand",
                            flags = 2048,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outRealUpperBand[],
                    @OutputParameterInfo(
                            paramName = "outRealMiddleBand",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outRealMiddleBand[],
                    @OutputParameterInfo(
                            paramName = "outRealLowerBand",
                            flags = 4096,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outRealLowerBand[]
            ) {
        return super.bbands(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInNbDevUp,
                optInNbDevDn,
                optInMAType,
                outBegIdx,
                outNBElement,
                outRealUpperBand,
                outRealMiddleBand,
                outRealLowerBand
                );
    }

    @Override
    public int bbandsLookback(
            final int optInTimePeriod,
            final double optInNbDevUp,
            final double optInNbDevDn,
            final MAType optInMAType) {
        return super.bbandsLookback(
                optInTimePeriod,
                optInNbDevUp,
                optInNbDevDn,
                optInMAType);
    }

    @Override
    @FuncInfo(
            name = "BETA",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 2,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode beta(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 5,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.beta(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int betaLookback(
            final int optInTimePeriod) {
        return super.betaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "BOP",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode bop(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.bop(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int bopLookback(
            ) {
        return super.bopLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CCI",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cci(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.cci(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int cciLookback(
            final int optInTimePeriod) {
        return super.cciLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "CDL2CROWS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl2Crows(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl2Crows(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl2CrowsLookback(
            ) {
        return super.cdl2CrowsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3BLACKCROWS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3BlackCrows(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3BlackCrows(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3BlackCrowsLookback(
            ) {
        return super.cdl3BlackCrowsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3INSIDE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3Inside(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3Inside(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3InsideLookback(
            ) {
        return super.cdl3InsideLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3LINESTRIKE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3LineStrike(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3LineStrike(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3LineStrikeLookback(
            ) {
        return super.cdl3LineStrikeLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3OUTSIDE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3Outside(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3Outside(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3OutsideLookback(
            ) {
        return super.cdl3OutsideLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3STARSINSOUTH",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3StarsInSouth(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3StarsInSouth(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3StarsInSouthLookback(
            ) {
        return super.cdl3StarsInSouthLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDL3WHITESOLDIERS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdl3WhiteSoldiers(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdl3WhiteSoldiers(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdl3WhiteSoldiersLookback(
            ) {
        return super.cdl3WhiteSoldiersLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLABANDONEDBABY",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlAbandonedBaby(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.30000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlAbandonedBaby(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlAbandonedBabyLookback(
            final double optInPenetration) {
        return super.cdlAbandonedBabyLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLADVANCEBLOCK",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlAdvanceBlock(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlAdvanceBlock(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlAdvanceBlockLookback(
            ) {
        return super.cdlAdvanceBlockLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLBELTHOLD",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlBeltHold(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlBeltHold(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlBeltHoldLookback(
            ) {
        return super.cdlBeltHoldLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLBREAKAWAY",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlBreakaway(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlBreakaway(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlBreakawayLookback(
            ) {
        return super.cdlBreakawayLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLCLOSINGMARUBOZU",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlClosingMarubozu(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlClosingMarubozu(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlClosingMarubozuLookback(
            ) {
        return super.cdlClosingMarubozuLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLCONCEALBABYSWALL",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlConcealBabysWall(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlConcealBabysWall(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlConcealBabysWallLookback(
            ) {
        return super.cdlConcealBabysWallLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLCOUNTERATTACK",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlCounterAttack(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlCounterAttack(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlCounterAttackLookback(
            ) {
        return super.cdlCounterAttackLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLDARKCLOUDCOVER",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlDarkCloudCover(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.50000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlDarkCloudCover(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlDarkCloudCoverLookback(
            final double optInPenetration) {
        return super.cdlDarkCloudCoverLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLDOJI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlDoji(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlDoji(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlDojiLookback(
            ) {
        return super.cdlDojiLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLDOJISTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlDojiStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlDojiStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlDojiStarLookback(
            ) {
        return super.cdlDojiStarLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLDRAGONFLYDOJI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlDragonflyDoji(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlDragonflyDoji(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlDragonflyDojiLookback(
            ) {
        return super.cdlDragonflyDojiLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLENGULFING",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlEngulfing(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlEngulfing(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlEngulfingLookback(
            ) {
        return super.cdlEngulfingLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLEVENINGDOJISTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlEveningDojiStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.30000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlEveningDojiStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlEveningDojiStarLookback(
            final double optInPenetration) {
        return super.cdlEveningDojiStarLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLEVENINGSTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlEveningStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.30000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlEveningStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlEveningStarLookback(
            final double optInPenetration) {
        return super.cdlEveningStarLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLGAPSIDESIDEWHITE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlGapSideSideWhite(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlGapSideSideWhite(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlGapSideSideWhiteLookback(
            ) {
        return super.cdlGapSideSideWhiteLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLGRAVESTONEDOJI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlGravestoneDoji(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlGravestoneDoji(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlGravestoneDojiLookback(
            ) {
        return super.cdlGravestoneDojiLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHAMMER",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHammer(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHammer(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHammerLookback(
            ) {
        return super.cdlHammerLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHANGINGMAN",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHangingMan(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHangingMan(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHangingManLookback(
            ) {
        return super.cdlHangingManLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHARAMI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHarami(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHarami(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHARAMICROSS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHaramiCross(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHaramiCross(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHaramiCrossLookback(
            ) {
        return super.cdlHaramiCrossLookback(
                );
    }

    @Override
    public int cdlHaramiLookback(
            ) {
        return super.cdlHaramiLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHIGHWAVE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHignWave(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHignWave(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHignWaveLookback(
            ) {
        return super.cdlHignWaveLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHIKKAKE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHikkake(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHikkake(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHikkakeLookback(
            ) {
        return super.cdlHikkakeLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHIKKAKEMOD",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHikkakeMod(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHikkakeMod(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHikkakeModLookback(
            ) {
        return super.cdlHikkakeModLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLHOMINGPIGEON",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlHomingPigeon(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlHomingPigeon(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlHomingPigeonLookback(
            ) {
        return super.cdlHomingPigeonLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLIDENTICAL3CROWS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlIdentical3Crows(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlIdentical3Crows(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlIdentical3CrowsLookback(
            ) {
        return super.cdlIdentical3CrowsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLINNECK",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlInNeck(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlInNeck(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlInNeckLookback(
            ) {
        return super.cdlInNeckLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLINVERTEDHAMMER",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlInvertedHammer(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlInvertedHammer(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlInvertedHammerLookback(
            ) {
        return super.cdlInvertedHammerLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLKICKING",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlKicking(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlKicking(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    @FuncInfo(
            name = "CDLKICKINGBYLENGTH",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlKickingByLength(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlKickingByLength(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlKickingByLengthLookback(
            ) {
        return super.cdlKickingByLengthLookback(
                );
    }

    @Override
    public int cdlKickingLookback(
            ) {
        return super.cdlKickingLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLLADDERBOTTOM",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlLadderBottom(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlLadderBottom(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlLadderBottomLookback(
            ) {
        return super.cdlLadderBottomLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLLONGLEGGEDDOJI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlLongLeggedDoji(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlLongLeggedDoji(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlLongLeggedDojiLookback(
            ) {
        return super.cdlLongLeggedDojiLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLLONGLINE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlLongLine(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlLongLine(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlLongLineLookback(
            ) {
        return super.cdlLongLineLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLMARUBOZU",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlMarubozu(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlMarubozu(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlMarubozuLookback(
            ) {
        return super.cdlMarubozuLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLMATCHINGLOW",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlMatchingLow(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlMatchingLow(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlMatchingLowLookback(
            ) {
        return super.cdlMatchingLowLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLMATHOLD",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlMatHold(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.50000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlMatHold(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlMatHoldLookback(
            final double optInPenetration) {
        return super.cdlMatHoldLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLMORNINGDOJISTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlMorningDojiStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.30000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlMorningDojiStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlMorningDojiStarLookback(
            final double optInPenetration) {
        return super.cdlMorningDojiStarLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLMORNINGSTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cdlMorningStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInPenetration",
                            displayName = "Penetration",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInPenetration",
                            defaultValue = 0.30000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 0,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInPenetration,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlMorningStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                optInPenetration,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlMorningStarLookback(
            final double optInPenetration) {
        return super.cdlMorningStarLookback(
                optInPenetration);
    }

    @Override
    @FuncInfo(
            name = "CDLONNECK",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlOnNeck(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlOnNeck(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlOnNeckLookback(
            ) {
        return super.cdlOnNeckLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLPIERCING",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlPiercing(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlPiercing(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlPiercingLookback(
            ) {
        return super.cdlPiercingLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLRICKSHAWMAN",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlRickshawMan(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlRickshawMan(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlRickshawManLookback(
            ) {
        return super.cdlRickshawManLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLRISEFALL3METHODS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlRiseFall3Methods(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlRiseFall3Methods(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlRiseFall3MethodsLookback(
            ) {
        return super.cdlRiseFall3MethodsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSEPARATINGLINES",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlSeperatingLines(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlSeperatingLines(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlSeperatingLinesLookback(
            ) {
        return super.cdlSeperatingLinesLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSHOOTINGSTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlShootingStar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlShootingStar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlShootingStarLookback(
            ) {
        return super.cdlShootingStarLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSHORTLINE",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlShortLine(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlShortLine(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlShortLineLookback(
            ) {
        return super.cdlShortLineLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSPINNINGTOP",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlSpinningTop(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlSpinningTop(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlSpinningTopLookback(
            ) {
        return super.cdlSpinningTopLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSTALLEDPATTERN",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlStalledPattern(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlStalledPattern(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlStalledPatternLookback(
            ) {
        return super.cdlStalledPatternLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLSTICKSANDWICH",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlStickSandwhich(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlStickSandwhich(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlStickSandwhichLookback(
            ) {
        return super.cdlStickSandwhichLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLTAKURI",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlTakuri(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlTakuri(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlTakuriLookback(
            ) {
        return super.cdlTakuriLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLTASUKIGAP",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlTasukiGap(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlTasukiGap(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlTasukiGapLookback(
            ) {
        return super.cdlTasukiGapLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLTHRUSTING",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlThrusting(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlThrusting(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlThrustingLookback(
            ) {
        return super.cdlThrustingLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLTRISTAR",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlTristar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlTristar(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlTristarLookback(
            ) {
        return super.cdlTristarLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLUNIQUE3RIVER",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlUnique3River(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlUnique3River(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlUnique3RiverLookback(
            ) {
        return super.cdlUnique3RiverLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLUPSIDEGAP2CROWS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlUpsideGap2Crows(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlUpsideGap2Crows(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlUpsideGap2CrowsLookback(
            ) {
        return super.cdlUpsideGap2CrowsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CDLXSIDEGAP3METHODS",
            group = "Pattern Recognition",
            flags = 268435456,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cdlXSideGap3Methods(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceOHLC",
                            flags = 15,
                            type = InputParameterType.TA_Input_Price
                    ) final double inOpen[],
                    final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.cdlXSideGap3Methods(
                startIdx,
                endIdx,
                inOpen,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int cdlXSideGap3MethodsLookback(
            ) {
        return super.cdlXSideGap3MethodsLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CEIL",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode ceil(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ceil(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int ceilLookback(
            ) {
        return super.ceilLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "CMO",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode cmo(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.cmo(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int cmoLookback(
            final int optInTimePeriod) {
        return super.cmoLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "CORREL",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 2,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode correl(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.correl(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int correlLookback(
            final int optInTimePeriod) {
        return super.correlLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "COS",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cos(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.cos(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "COSH",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode cosh(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.cosh(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int coshLookback(
            ) {
        return super.coshLookback(
                );
    }

    @Override
    public int cosLookback(
            ) {
        return super.cosLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "DEMA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode dema(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.dema(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int demaLookback(
            final int optInTimePeriod) {
        return super.demaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "DIV",
            group = "Math Operators",
            flags = 0,
            nbInput = 2,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode div(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.div(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int divLookback(
            ) {
        return super.divLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "DX",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode dx(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.dx(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int dxLookback(
            final int optInTimePeriod) {
        return super.dxLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "EMA",
            group = "Overlap Studies",
            flags = 150994944,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode ema(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ema(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int emaLookback(
            final int optInTimePeriod) {
        return super.emaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "EXP",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode exp(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.exp(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int expLookback(
            ) {
        return super.expLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "FLOOR",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode floor(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.floor(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int floorLookback(
            ) {
        return super.floorLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_DCPERIOD",
            group = "Cycle Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode htDcPeriod(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.htDcPeriod(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int htDcPeriodLookback(
            ) {
        return super.htDcPeriodLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_DCPHASE",
            group = "Cycle Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode htDcPhase(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.htDcPhase(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int htDcPhaseLookback(
            ) {
        return super.htDcPhaseLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_PHASOR",
            group = "Cycle Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 2
            )
            public RetCode htPhasor(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInPhase",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outInPhase[],
                    @OutputParameterInfo(
                            paramName = "outQuadrature",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outQuadrature[]
            ) {
        return super.htPhasor(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outInPhase,
                outQuadrature
                );
    }

    @Override
    public int htPhasorLookback(
            ) {
        return super.htPhasorLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_SINE",
            group = "Cycle Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 2
            )
            public RetCode htSine(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outSine",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outSine[],
                    @OutputParameterInfo(
                            paramName = "outLeadSine",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outLeadSine[]
            ) {
        return super.htSine(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outSine,
                outLeadSine
                );
    }

    @Override
    public int htSineLookback(
            ) {
        return super.htSineLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_TRENDLINE",
            group = "Overlap Studies",
            flags = 150994944,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode htTrendline(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.htTrendline(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int htTrendlineLookback(
            ) {
        return super.htTrendlineLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "HT_TRENDMODE",
            group = "Cycle Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode htTrendMode(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.htTrendMode(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int htTrendModeLookback(
            ) {
        return super.htTrendModeLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "KAMA",
            group = "Overlap Studies",
            flags = 150994944,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode kama(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.kama(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int kamaLookback(
            final int optInTimePeriod) {
        return super.kamaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "LINEARREG",
            group = "Statistic Functions",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode linearReg(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.linearReg(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "LINEARREG_ANGLE",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode linearRegAngle(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.linearRegAngle(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int linearRegAngleLookback(
            final int optInTimePeriod) {
        return super.linearRegAngleLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "LINEARREG_INTERCEPT",
            group = "Statistic Functions",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode linearRegIntercept(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.linearRegIntercept(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int linearRegInterceptLookback(
            final int optInTimePeriod) {
        return super.linearRegInterceptLookback(
                optInTimePeriod);
    }

    @Override
    public int linearRegLookback(
            final int optInTimePeriod) {
        return super.linearRegLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "LINEARREG_SLOPE",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode linearRegSlope(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.linearRegSlope(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int linearRegSlopeLookback(
            final int optInTimePeriod) {
        return super.linearRegSlopeLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "LN",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode ln(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ln(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int lnLookback(
            ) {
        return super.lnLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "LOG10",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode log10(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.log10(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int log10Lookback(
            ) {
        return super.log10Lookback(
                );
    }

    @Override
    @FuncInfo(
            name = "MACD",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 3,
            nbOutput = 3
            )
            public RetCode macd(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInFastPeriod",
                            displayName = "Fast Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastPeriod",
                            defaultValue = 12,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSlowPeriod",
                            displayName = "Slow Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowPeriod",
                            defaultValue = 26,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSignalPeriod",
                            displayName = "Signal Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSignalPeriod",
                            defaultValue = 9,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSignalPeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMACD",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACD[],
                    @OutputParameterInfo(
                            paramName = "outMACDSignal",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDSignal[],
                    @OutputParameterInfo(
                            paramName = "outMACDHist",
                            flags = 16,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDHist[]
            ) {
        return super.macd(
                startIdx,
                endIdx,
                inReal,
                optInFastPeriod,
                optInSlowPeriod,
                optInSignalPeriod,
                outBegIdx,
                outNBElement,
                outMACD,
                outMACDSignal,
                outMACDHist
                );
    }

    @Override
    @FuncInfo(
            name = "MACDEXT",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 6,
            nbOutput = 3
            )
            public RetCode macdExt(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInFastPeriod",
                            displayName = "Fast Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastPeriod",
                            defaultValue = 12,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInFastMAType",
                            displayName = "Fast MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInFastMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInFastMAType,
                    @OptInputParameterInfo(
                            paramName = "optInSlowPeriod",
                            displayName = "Slow Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowPeriod",
                            defaultValue = 26,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSlowMAType",
                            displayName = "Slow MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInSlowMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInSlowMAType,
                    @OptInputParameterInfo(
                            paramName = "optInSignalPeriod",
                            displayName = "Signal Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSignalPeriod",
                            defaultValue = 9,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSignalPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSignalMAType",
                            displayName = "Signal MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInSignalMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInSignalMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMACD",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACD[],
                    @OutputParameterInfo(
                            paramName = "outMACDSignal",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDSignal[],
                    @OutputParameterInfo(
                            paramName = "outMACDHist",
                            flags = 16,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDHist[]
            ) {
        return super.macdExt(
                startIdx,
                endIdx,
                inReal,
                optInFastPeriod,
                optInFastMAType,
                optInSlowPeriod,
                optInSlowMAType,
                optInSignalPeriod,
                optInSignalMAType,
                outBegIdx,
                outNBElement,
                outMACD,
                outMACDSignal,
                outMACDHist
                );
    }

    @Override
    public int macdExtLookback(
            final int optInFastPeriod,
            final MAType optInFastMAType,
            final int optInSlowPeriod,
            final MAType optInSlowMAType,
            final int optInSignalPeriod,
            final MAType optInSignalMAType) {
        return super.macdExtLookback(
                optInFastPeriod,
                optInFastMAType,
                optInSlowPeriod,
                optInSlowMAType,
                optInSignalPeriod,
                optInSignalMAType);
    }

    @Override
    @FuncInfo(
            name = "MACDFIX",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 3
            )
            public RetCode macdFix(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInSignalPeriod",
                            displayName = "Signal Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSignalPeriod",
                            defaultValue = 9,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSignalPeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMACD",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACD[],
                    @OutputParameterInfo(
                            paramName = "outMACDSignal",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDSignal[],
                    @OutputParameterInfo(
                            paramName = "outMACDHist",
                            flags = 16,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMACDHist[]
            ) {
        return super.macdFix(
                startIdx,
                endIdx,
                inReal,
                optInSignalPeriod,
                outBegIdx,
                outNBElement,
                outMACD,
                outMACDSignal,
                outMACDHist
                );
    }

    @Override
    public int macdFixLookback(
            final int optInSignalPeriod) {
        return super.macdFixLookback(
                optInSignalPeriod);
    }

    @Override
    public int macdLookback(
            final int optInFastPeriod,
            final int optInSlowPeriod,
            final int optInSignalPeriod) {
        return super.macdLookback(
                optInFastPeriod,
                optInSlowPeriod,
                optInSignalPeriod);
    }

    @Override
    @FuncInfo(
            name = "MAMA",
            group = "Overlap Studies",
            flags = 150994944,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 2
            )
            public RetCode mama(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInFastLimit",
                            displayName = "Fast Limit",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInFastLimit",
                            defaultValue = 0.50000,
                            min = 0.01000,
                            max = 0.99000,
                            precision = 2,
                            suggested_start = 0.21000,
                            suggested_end = 0.80000,
                            suggested_increment = 0.01000
                    ) final double optInFastLimit,
                    @OptInputParameterInfo(
                            paramName = "optInSlowLimit",
                            displayName = "Slow Limit",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInSlowLimit",
                            defaultValue = 0.05000,
                            min = 0.01000,
                            max = 0.99000,
                            precision = 2,
                            suggested_start = 0.01000,
                            suggested_end = 0.60000,
                            suggested_increment = 0.01000
                    ) final double optInSlowLimit,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMAMA",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMAMA[],
                    @OutputParameterInfo(
                            paramName = "outFAMA",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outFAMA[]
            ) {
        return super.mama(
                startIdx,
                endIdx,
                inReal,
                optInFastLimit,
                optInSlowLimit,
                outBegIdx,
                outNBElement,
                outMAMA,
                outFAMA
                );
    }

    @Override
    public int mamaLookback(
            final double optInFastLimit,
            final double optInSlowLimit) {
        return super.mamaLookback(
                optInFastLimit,
                optInSlowLimit);
    }

    @Override
    @FuncInfo(
            name = "MAX",
            group = "Math Operators",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode max(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.max(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "MAXINDEX",
            group = "Math Operators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode maxIndex(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.maxIndex(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int maxIndexLookback(
            final int optInTimePeriod) {
        return super.maxIndexLookback(
                optInTimePeriod);
    }

    @Override
    public int maxLookback(
            final int optInTimePeriod) {
        return super.maxLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MEDPRICE",
            group = "Price Transform",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode medPrice(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.medPrice(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int medPriceLookback(
            ) {
        return super.medPriceLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "MFI",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode mfi(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLCV",
                            flags = 30,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final double inVolume[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.mfi(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                inVolume,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int mfiLookback(
            final int optInTimePeriod) {
        return super.mfiLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MIDPOINT",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode midPoint(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.midPoint(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int midPointLookback(
            final int optInTimePeriod) {
        return super.midPointLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MIDPRICE",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode midPrice(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.midPrice(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int midPriceLookback(
            final int optInTimePeriod) {
        return super.midPriceLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MIN",
            group = "Math Operators",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode min(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.min(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "MININDEX",
            group = "Math Operators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode minIndex(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outInteger",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outInteger[]

            ) {
        return super.minIndex(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outInteger
                );
    }

    @Override
    public int minIndexLookback(
            final int optInTimePeriod) {
        return super.minIndexLookback(
                optInTimePeriod);
    }

    @Override
    public int minLookback(
            final int optInTimePeriod) {
        return super.minLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MINMAX",
            group = "Math Operators",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 2
            )
            public RetCode minMax(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMin",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMin[],
                    @OutputParameterInfo(
                            paramName = "outMax",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outMax[]
            ) {
        return super.minMax(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outMin,
                outMax
                );
    }

    @Override
    @FuncInfo(
            name = "MINMAXINDEX",
            group = "Math Operators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 2
            )
            public RetCode minMaxIndex(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outMinIdx",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outMinIdx[]
                    ,
                    @OutputParameterInfo(
                            paramName = "outMaxIdx",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Integer
                    ) final int outMaxIdx[]

            ) {
        return super.minMaxIndex(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outMinIdx,
                outMaxIdx
                );
    }

    @Override
    public int minMaxIndexLookback(
            final int optInTimePeriod) {
        return super.minMaxIndexLookback(
                optInTimePeriod);
    }

    @Override
    public int minMaxLookback(
            final int optInTimePeriod) {
        return super.minMaxLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MINUS_DI",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode minusDI(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.minusDI(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int minusDILookback(
            final int optInTimePeriod) {
        return super.minusDILookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MINUS_DM",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode minusDM(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.minusDM(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int minusDMLookback(
            final int optInTimePeriod) {
        return super.minusDMLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MOM",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode mom(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 10,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.mom(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int momLookback(
            final int optInTimePeriod) {
        return super.momLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "MA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode movingAverage(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInMAType",
                            displayName = "MA Type",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.movingAverage(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInMAType,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int movingAverageLookback(
            final int optInTimePeriod,
            final MAType optInMAType) {
        return super.movingAverageLookback(
                optInTimePeriod,
                optInMAType);
    }

    @Override
    @FuncInfo(
            name = "MAVP",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 2,
            nbOptInput = 3,
            nbOutput = 1
            )
            public RetCode movingAverageVariablePeriod(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @InputParameterInfo(
                            paramName = "inPeriods",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inPeriods[],
                    @OptInputParameterInfo(
                            paramName = "optInMinPeriod",
                            displayName = "Minimum Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInMinPeriod",
                            defaultValue = 2,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInMinPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInMaxPeriod",
                            displayName = "Maximum Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInMaxPeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInMaxPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInMAType",
                            displayName = "MA Type",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.movingAverageVariablePeriod(
                startIdx,
                endIdx,
                inReal,
                inPeriods,
                optInMinPeriod,
                optInMaxPeriod,
                optInMAType,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int movingAverageVariablePeriodLookback(
            final int optInMinPeriod,
            final int optInMaxPeriod,
            final MAType optInMAType) {
        return super.movingAverageVariablePeriodLookback(
                optInMinPeriod,
                optInMaxPeriod,
                optInMAType);
    }

    @Override
    @FuncInfo(
            name = "MULT",
            group = "Math Operators",
            flags = 0,
            nbInput = 2,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode mult(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.mult(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int multLookback(
            ) {
        return super.multLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "NATR",
            group = "Volatility Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode natr(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.natr(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int natrLookback(
            final int optInTimePeriod) {
        return super.natrLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "OBV",
            group = "Volume Indicators",
            flags = 0,
            nbInput = 2,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode obv(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @InputParameterInfo(
                            paramName = "inPriceV",
                            flags = 16,
                            type = InputParameterType.TA_Input_Price
                    ) final double inVolume[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.obv(
                startIdx,
                endIdx,
                inReal,
                inVolume,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int obvLookback(
            ) {
        return super.obvLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "PLUS_DI",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode plusDI(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.plusDI(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int plusDILookback(
            final int optInTimePeriod) {
        return super.plusDILookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "PLUS_DM",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode plusDM(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.plusDM(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int plusDMLookback(
            final int optInTimePeriod) {
        return super.plusDMLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "PPO",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 3,
            nbOutput = 1
            )
            public RetCode ppo(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInFastPeriod",
                            displayName = "Fast Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastPeriod",
                            defaultValue = 12,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInSlowPeriod",
                            displayName = "Slow Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowPeriod",
                            defaultValue = 26,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowPeriod,
                    @OptInputParameterInfo(
                            paramName = "optInMAType",
                            displayName = "MA Type",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInMAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInMAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ppo(
                startIdx,
                endIdx,
                inReal,
                optInFastPeriod,
                optInSlowPeriod,
                optInMAType,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int ppoLookback(
            final int optInFastPeriod,
            final int optInSlowPeriod,
            final MAType optInMAType) {
        return super.ppoLookback(
                optInFastPeriod,
                optInSlowPeriod,
                optInMAType);
    }

    @Override
    @FuncInfo(
            name = "ROC",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode roc(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 10,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.roc(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int rocLookback(
            final int optInTimePeriod) {
        return super.rocLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "ROCP",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode rocP(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 10,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.rocP(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int rocPLookback(
            final int optInTimePeriod) {
        return super.rocPLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "ROCR",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode rocR(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 10,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.rocR(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "ROCR100",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode rocR100(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 10,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.rocR100(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int rocR100Lookback(
            final int optInTimePeriod) {
        return super.rocR100Lookback(
                optInTimePeriod);
    }

    @Override
    public int rocRLookback(
            final int optInTimePeriod) {
        return super.rocRLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "RSI",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode rsi(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.rsi(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int rsiLookback(
            final int optInTimePeriod) {
        return super.rsiLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "SAR",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode sar(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInAcceleration",
                            displayName = "Acceleration Factor",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAcceleration",
                            defaultValue = 0.02000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.20000,
                            suggested_increment = 0.01000
                    ) final double optInAcceleration,
                    @OptInputParameterInfo(
                            paramName = "optInMaximum",
                            displayName = "AF Maximum",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInMaximum",
                            defaultValue = 0.20000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.20000,
                            suggested_end = 0.40000,
                            suggested_increment = 0.01000
                    ) final double optInMaximum,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sar(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInAcceleration,
                optInMaximum,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "SAREXT",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 8,
            nbOutput = 1
            )
            public RetCode sarExt(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHL",
                            flags = 6,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    @OptInputParameterInfo(
                            paramName = "optInStartValue",
                            displayName = "Start Value",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInStartValue",
                            defaultValue = 0.00000,
                            min = -30000000000000002000000000000000000000.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.00000,
                            suggested_end = 0.00000,
                            suggested_increment = 0.00000
                    ) final double optInStartValue,
                    @OptInputParameterInfo(
                            paramName = "optInOffsetOnReverse",
                            displayName = "Offset on Reverse",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInOffsetOnReverse",
                            defaultValue = 0.00000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.15000,
                            suggested_increment = 0.01000
                    ) final double optInOffsetOnReverse,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationInitLong",
                            displayName = "AF Init Long",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationInitLong",
                            defaultValue = 0.02000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.19000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationInitLong,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationLong",
                            displayName = "AF Long",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationLong",
                            defaultValue = 0.02000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.20000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationLong,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationMaxLong",
                            displayName = "AF Max Long",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationMaxLong",
                            defaultValue = 0.20000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.20000,
                            suggested_end = 0.40000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationMaxLong,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationInitShort",
                            displayName = "AF Init Short",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationInitShort",
                            defaultValue = 0.02000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.19000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationInitShort,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationShort",
                            displayName = "AF Short",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationShort",
                            defaultValue = 0.02000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.01000,
                            suggested_end = 0.20000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationShort,
                    @OptInputParameterInfo(
                            paramName = "optInAccelerationMaxShort",
                            displayName = "AF Max Short",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInAccelerationMaxShort",
                            defaultValue = 0.20000,
                            min = 0.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 4,
                            suggested_start = 0.20000,
                            suggested_end = 0.40000,
                            suggested_increment = 0.01000
                    ) final double optInAccelerationMaxShort,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sarExt(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                optInStartValue,
                optInOffsetOnReverse,
                optInAccelerationInitLong,
                optInAccelerationLong,
                optInAccelerationMaxLong,
                optInAccelerationInitShort,
                optInAccelerationShort,
                optInAccelerationMaxShort,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int sarExtLookback(
            final double optInStartValue,
            final double optInOffsetOnReverse,
            final double optInAccelerationInitLong,
            final double optInAccelerationLong,
            final double optInAccelerationMaxLong,
            final double optInAccelerationInitShort,
            final double optInAccelerationShort,
            final double optInAccelerationMaxShort) {
        return super.sarExtLookback(
                optInStartValue,
                optInOffsetOnReverse,
                optInAccelerationInitLong,
                optInAccelerationLong,
                optInAccelerationMaxLong,
                optInAccelerationInitShort,
                optInAccelerationShort,
                optInAccelerationMaxShort);
    }

    @Override
    public int sarLookback(
            final double optInAcceleration,
            final double optInMaximum) {
        return super.sarLookback(
                optInAcceleration,
                optInMaximum);
    }

    @Override
    @FuncInfo(
            name = "SIN",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode sin(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sin(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "SINH",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode sinh(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sinh(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int sinhLookback(
            ) {
        return super.sinhLookback(
                );
    }

    @Override
    public int sinLookback(
            ) {
        return super.sinLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "SMA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode sma(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sma(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int smaLookback(
            final int optInTimePeriod) {
        return super.smaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "SQRT",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode sqrt(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sqrt(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int sqrtLookback(
            ) {
        return super.sqrtLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "STDDEV",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode stdDev(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 5,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInNbDev",
                            displayName = "Deviations",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInNbDev",
                            defaultValue = 1.00000,
                            min = -30000000000000002000000000000000000000.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 2,
                            suggested_start = -2.00000,
                            suggested_end = 2.00000,
                            suggested_increment = 0.20000
                    ) final double optInNbDev,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.stdDev(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInNbDev,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int stdDevLookback(
            final int optInTimePeriod,
            final double optInNbDev) {
        return super.stdDevLookback(
                optInTimePeriod,
                optInNbDev);
    }

    @Override
    @FuncInfo(
            name = "STOCH",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 5,
            nbOutput = 2
            )
            public RetCode stoch(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInFastK_Period",
                            displayName = "Fast-K Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastK_Period",
                            defaultValue = 5,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastK_Period,
                    @OptInputParameterInfo(
                            paramName = "optInSlowK_Period",
                            displayName = "Slow-K Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowK_Period",
                            defaultValue = 3,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowK_Period,
                    @OptInputParameterInfo(
                            paramName = "optInSlowK_MAType",
                            displayName = "Slow-K MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInSlowK_MAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInSlowK_MAType,
                    @OptInputParameterInfo(
                            paramName = "optInSlowD_Period",
                            displayName = "Slow-D Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInSlowD_Period",
                            defaultValue = 3,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInSlowD_Period,
                    @OptInputParameterInfo(
                            paramName = "optInSlowD_MAType",
                            displayName = "Slow-D MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInSlowD_MAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInSlowD_MAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outSlowK",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outSlowK[],
                    @OutputParameterInfo(
                            paramName = "outSlowD",
                            flags = 4,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outSlowD[]
            ) {
        return super.stoch(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInFastK_Period,
                optInSlowK_Period,
                optInSlowK_MAType,
                optInSlowD_Period,
                optInSlowD_MAType,
                outBegIdx,
                outNBElement,
                outSlowK,
                outSlowD
                );
    }

    @Override
    @FuncInfo(
            name = "STOCHF",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 3,
            nbOutput = 2
            )
            public RetCode stochF(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInFastK_Period",
                            displayName = "Fast-K Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastK_Period",
                            defaultValue = 5,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastK_Period,
                    @OptInputParameterInfo(
                            paramName = "optInFastD_Period",
                            displayName = "Fast-D Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastD_Period",
                            defaultValue = 3,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastD_Period,
                    @OptInputParameterInfo(
                            paramName = "optInFastD_MAType",
                            displayName = "Fast-D MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInFastD_MAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInFastD_MAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outFastK",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outFastK[],
                    @OutputParameterInfo(
                            paramName = "outFastD",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outFastD[]
            ) {
        return super.stochF(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInFastK_Period,
                optInFastD_Period,
                optInFastD_MAType,
                outBegIdx,
                outNBElement,
                outFastK,
                outFastD
                );
    }

    @Override
    public int stochFLookback(
            final int optInFastK_Period,
            final int optInFastD_Period,
            final MAType optInFastD_MAType) {
        return super.stochFLookback(
                optInFastK_Period,
                optInFastD_Period,
                optInFastD_MAType);
    }

    @Override
    public int stochLookback(
            final int optInFastK_Period,
            final int optInSlowK_Period,
            final MAType optInSlowK_MAType,
            final int optInSlowD_Period,
            final MAType optInSlowD_MAType) {
        return super.stochLookback(
                optInFastK_Period,
                optInSlowK_Period,
                optInSlowK_MAType,
                optInSlowD_Period,
                optInSlowD_MAType);
    }

    @Override
    @FuncInfo(
            name = "STOCHRSI",
            group = "Momentum Indicators",
            flags = 134217728,
            nbInput = 1,
            nbOptInput = 4,
            nbOutput = 2
            )
            public RetCode stochRsi(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInFastK_Period",
                            displayName = "Fast-K Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastK_Period",
                            defaultValue = 5,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastK_Period,
                    @OptInputParameterInfo(
                            paramName = "optInFastD_Period",
                            displayName = "Fast-D Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInFastD_Period",
                            defaultValue = 3,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInFastD_Period,
                    @OptInputParameterInfo(
                            paramName = "optInFastD_MAType",
                            displayName = "Fast-D MA",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerList,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
                    ) @IntegerList(
                            paramName = "optInFastD_MAType",
                            defaultValue = 0,
                            value = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                            string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
                    ) final MAType optInFastD_MAType,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outFastK",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outFastK[],
                    @OutputParameterInfo(
                            paramName = "outFastD",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outFastD[]
            ) {
        return super.stochRsi(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInFastK_Period,
                optInFastD_Period,
                optInFastD_MAType,
                outBegIdx,
                outNBElement,
                outFastK,
                outFastD
                );
    }

    @Override
    public int stochRsiLookback(
            final int optInTimePeriod,
            final int optInFastK_Period,
            final int optInFastD_Period,
            final MAType optInFastD_MAType) {
        return super.stochRsiLookback(
                optInTimePeriod,
                optInFastK_Period,
                optInFastD_Period,
                optInFastD_MAType);
    }

    @Override
    @FuncInfo(
            name = "SUB",
            group = "Math Operators",
            flags = 0,
            nbInput = 2,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode sub(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal0",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal0[],
                    @InputParameterInfo(
                            paramName = "inReal1",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal1[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sub(
                startIdx,
                endIdx,
                inReal0,
                inReal1,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int subLookback(
            ) {
        return super.subLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "SUM",
            group = "Math Operators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode sum(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.sum(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int sumLookback(
            final int optInTimePeriod) {
        return super.sumLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "T3",
            group = "Overlap Studies",
            flags = 150994944,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode t3(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 5,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInVFactor",
                            displayName = "Volume Factor",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInVFactor",
                            defaultValue = 0.70000,
                            min = 0.00000,
                            max = 1.00000,
                            precision = 2,
                            suggested_start = 0.01000,
                            suggested_end = 1.00000,
                            suggested_increment = 0.05000
                    ) final double optInVFactor,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.t3(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInVFactor,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int t3Lookback(
            final int optInTimePeriod,
            final double optInVFactor) {
        return super.t3Lookback(
                optInTimePeriod,
                optInVFactor);
    }

    @Override
    @FuncInfo(
            name = "TAN",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode tan(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.tan(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    @FuncInfo(
            name = "TANH",
            group = "Math Transform",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode tanh(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.tanh(
                startIdx,
                endIdx,
                inReal,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int tanhLookback(
            ) {
        return super.tanhLookback(
                );
    }

    @Override
    public int tanLookback(
            ) {
        return super.tanLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "TEMA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode tema(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.tema(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int temaLookback(
            final int optInTimePeriod) {
        return super.temaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "TRIMA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode trima(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.trima(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int trimaLookback(
            final int optInTimePeriod) {
        return super.trimaLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "TRIX",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode trix(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.trix(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int trixLookback(
            final int optInTimePeriod) {
        return super.trixLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "TRANGE",
            group = "Volatility Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode trueRange(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.trueRange(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int trueRangeLookback(
            ) {
        return super.trueRangeLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "TSF",
            group = "Statistic Functions",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode tsf(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.tsf(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int tsfLookback(
            final int optInTimePeriod) {
        return super.tsfLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "TYPPRICE",
            group = "Price Transform",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode typPrice(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.typPrice(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int typPriceLookback(
            ) {
        return super.typPriceLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "ULTOSC",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 3,
            nbOutput = 1
            )
            public RetCode ultOsc(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod1",
                            displayName = "First Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod1",
                            defaultValue = 7,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod1,
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod2",
                            displayName = "Second Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod2",
                            defaultValue = 14,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod2,
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod3",
                            displayName = "Third Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod3",
                            defaultValue = 28,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod3,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.ultOsc(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod1,
                optInTimePeriod2,
                optInTimePeriod3,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int ultOscLookback(
            final int optInTimePeriod1,
            final int optInTimePeriod2,
            final int optInTimePeriod3) {
        return super.ultOscLookback(
                optInTimePeriod1,
                optInTimePeriod2,
                optInTimePeriod3);
    }

    @Override
    @FuncInfo(
            name = "VAR",
            group = "Statistic Functions",
            flags = 0,
            nbInput = 1,
            nbOptInput = 2,
            nbOutput = 1
            )
            public RetCode variance(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 5,
                            min = 1,
                            max = 100000,
                            suggested_start = 1,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    @OptInputParameterInfo(
                            paramName = "optInNbDev",
                            displayName = "Deviations",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_RealRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
                    ) @RealRange(
                            paramName = "optInNbDev",
                            defaultValue = 1.00000,
                            min = -30000000000000002000000000000000000000.00000,
                            max = 30000000000000002000000000000000000000.00000,
                            precision = 2,
                            suggested_start = -2.00000,
                            suggested_end = 2.00000,
                            suggested_increment = 0.20000
                    ) final double optInNbDev,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.variance(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                optInNbDev,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int varianceLookback(
            final int optInTimePeriod,
            final double optInNbDev) {
        return super.varianceLookback(
                optInTimePeriod,
                optInNbDev);
    }

    @Override
    @FuncInfo(
            name = "WCLPRICE",
            group = "Price Transform",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 0,
            nbOutput = 1
            )
            public RetCode wclPrice(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.wclPrice(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int wclPriceLookback(
            ) {
        return super.wclPriceLookback(
                );
    }

    @Override
    @FuncInfo(
            name = "WILLR",
            group = "Momentum Indicators",
            flags = 0,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode willR(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inPriceHLC",
                            flags = 14,
                            type = InputParameterType.TA_Input_Price
                    ) final double inHigh[],
                    final double inLow[],
                    final double inClose[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 14,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.willR(
                startIdx,
                endIdx,
                inHigh,
                inLow,
                inClose,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int willRLookback(
            final int optInTimePeriod) {
        return super.willRLookback(
                optInTimePeriod);
    }

    @Override
    @FuncInfo(
            name = "WMA",
            group = "Overlap Studies",
            flags = 16777216,
            nbInput = 1,
            nbOptInput = 1,
            nbOutput = 1
            )
            public RetCode wma(
                    final int startIdx,
                    final int endIdx,
                    @InputParameterInfo(
                            paramName = "inReal",
                            flags = 0,
                            type = InputParameterType.TA_Input_Real
                    ) final double inReal[],
                    @OptInputParameterInfo(
                            paramName = "optInTimePeriod",
                            displayName = "Time Period",
                            flags = 0,
                            type = OptInputParameterType.TA_OptInput_IntegerRange,
                            dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
                    ) @IntegerRange(
                            paramName = "optInTimePeriod",
                            defaultValue = 30,
                            min = 2,
                            max = 100000,
                            suggested_start = 4,
                            suggested_end = 200,
                            suggested_increment = 1
                    ) final int optInTimePeriod,
                    final MInteger outBegIdx,
                    final MInteger outNBElement,
                    @OutputParameterInfo(
                            paramName = "outReal",
                            flags = 1,
                            type = OutputParameterType.TA_Output_Real
                    ) final double outReal[]
            ) {
        return super.wma(
                startIdx,
                endIdx,
                inReal,
                optInTimePeriod,
                outBegIdx,
                outNBElement,
                outReal
                );
    }

    @Override
    public int wmaLookback(
            final int optInTimePeriod) {
        return super.wmaLookback(
                optInTimePeriod);
    }

}

/***************
 * End of File *
 ***************/
